- name: Create partitions (MBR)
  when:
    - ansible_virtualization_role != 'host'
  ansible.builtin.command:
    argv:
      - sgdisk
      - --align-end
      - --clear
      - --new=0:0:+1M
      - --change-name=0:BIOS
      - --typecode=0:ef02
      - --new=0:0:0
      - --change-name=0:root
      - --typecode=0:8304
      - "{{ item }}"
  with_items:
    - "{{ system_disks }}"
  register: install_arch_sgdisk
  changed_when:
    - "install_arch_sgdisk.rc == 0"

- name: Create partitions (EFI)
  when:
    - ansible_virtualization_role == 'host'
  ansible.builtin.command:
    argv:
      - sgdisk
      - --align-end
      - --clear
      - --new=0:0:+1M --change-name=0:'BIOS boot partition' --typecode=0:ef02
      - --new=0:0:+512M --change-name=0:'EFI system partition' --typecode=0:ef00
      - --new=0:0:0 --change-name=0:root --typecode=0:8304
      - "{{ item }}"
  with_items:
    - "{{ system_disks }}"
  register: install_arch_sgdisk
  changed_when:
    - "install_arch_sgdisk.rc == 0"

- name: Store root partition number for later steps
  ansible.builtin.set_fact:
    install_arch_root_partno: "{{ '3' if ansible_virtualization_role == 'host' else '2' }}"

- name: Format the root partition
  ansible.builtin.command:
    argv:
      - mkfs.ext4
      - -L
      - root
      - -m
      - 0
      - "{{ system_disks[0] }}{{ 'p' if 'nvme' in system_disks[0] }}{{ install_arch_root_partno }}"
  changed_when:
    - true

- name: Format the EFI system partition
  when:
    - ansible_virtualization_role == 'host'
  ansible.builtin.command:
    argv:
      - mkfs.fat
      - -F
      - 32
      - -S
      - 4096
      - -n
      - ESP
      - "{{ system_disks[0] }}{{ 'p2' if 'nvme' in system_disks[0] else '2' }}"
  changed_when:
    - false
